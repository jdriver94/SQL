# I acquired the Spotify data utilized in this project from Kaggle.
# Following that, I made a table for inserting Spotify data.
# Finally, the data was analyzed with SQL to generate insights.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Inserted the Spotify Data .csv into the table.

#To further examine the data, I utilized the following SQL code. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name artist,
track_name track,
avg(popularity) popularity,
round(avg(danceability*100)) danceability,
round(avg(energy*100)) energy
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

#Next found what artist released the longest song? 
SELECT artist_name, MAX(duration_ms) AS max_duration
FROM SpotifyData
GROUP BY artist_name
ORDER BY max_duration DESC
LIMIT 1;

#Who were the top 10 artists based on popularity?
SELECT artist_name artist, popularity
FROM SpotifyData
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

#Determine the avg popularity, danceability, and energy by artist and track.
SELECT
artist_name as artist,
track_name as track,
avg(popularity) as popularity,
round(avg(danceability*100)) as danceability,
round(avg(energy*100)) as energy
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#Then I wanted to see if there was any correlation between loudness and popularity
SELECT artist_name, max(loudness), max(popularity)
FROM SpotifyData
GROUP BY popularity, artist_name
ORDER BY max(loudness) ASC;

SELECT artist_name, MAX(loudness), MAX(popularity)
FROM SpotifyData
GROUP BY artist_name
ORDER BY MAX(popularity) DESC, MAX(loudness) ASC;
